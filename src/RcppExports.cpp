// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dIPBH
std::vector<double> dIPBH(const std::vector<double>& x, const std::vector<double>& alpha, const std::vector<double>& eta, bool log_transform);
RcppExport SEXP _IPBH_dIPBH(SEXP xSEXP, SEXP alphaSEXP, SEXP etaSEXP, SEXP log_transformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_transform(log_transformSEXP);
    rcpp_result_gen = Rcpp::wrap(dIPBH(x, alpha, eta, log_transform));
    return rcpp_result_gen;
END_RCPP
}
// pIPBH
std::vector<double> pIPBH(const std::vector<double>& x, const std::vector<double>& alpha, const std::vector<double>& eta, bool lower_tail, bool log_p);
RcppExport SEXP _IPBH_pIPBH(SEXP xSEXP, SEXP alphaSEXP, SEXP etaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pIPBH(x, alpha, eta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qIPBH
std::vector<double> qIPBH(const std::vector<double>& p, const std::vector<double>& alpha, const std::vector<double>& eta, bool lower_tail, bool log_p);
RcppExport SEXP _IPBH_qIPBH(SEXP pSEXP, SEXP alphaSEXP, SEXP etaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qIPBH(p, alpha, eta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rIPBH
std::vector<std::vector<double>> rIPBH(int n, const std::vector<double>& alpha, const std::vector<double>& eta);
RcppExport SEXP _IPBH_rIPBH(SEXP nSEXP, SEXP alphaSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(rIPBH(n, alpha, eta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IPBH_dIPBH", (DL_FUNC) &_IPBH_dIPBH, 4},
    {"_IPBH_pIPBH", (DL_FUNC) &_IPBH_pIPBH, 5},
    {"_IPBH_qIPBH", (DL_FUNC) &_IPBH_qIPBH, 5},
    {"_IPBH_rIPBH", (DL_FUNC) &_IPBH_rIPBH, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_IPBH(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
